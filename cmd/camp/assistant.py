# This file is a command execution file generated by the command assistant. 
# Do not edit it.

import os
from ..factory import base

# Command Description Information
_BDCMD_DESC_ = {
    "name":"assistant",
    "alias":"command assistant",
    "desc":"Generate execution commands from existing modules"
}

class Command(base.BaseCommand):
    def __init__(self):
        super().__init__(name=__class__.__module__,alias='command assistant',description='Generate execution commands from existing modules')
    
    @base.BaseCommand.as_cmder
    def make_cmd(self,mpth:str,cdir:str,cls:str,alias:str,desc:str,inner:str='false'):
        """
        Create a command from a module
        
        :param mpth:   str #Module relative path, such as: ./a/b/c
        :param cdir:   str #Relative Directory, such as: ./cmder
        :param cls:   str #Class name
        :param alias: str #command alias
        :param desc:  str #command description
        """
        if cdir == "./cmd" or cdir == "cmd":
            raise Exception("The current command storage directory conflicts with the internal command storage directory")

        # Extract Command Name
        mpth = mpth.replace("\\","/").rstrip("/")
        mdu = mpth.replace("/",".")

        # Determine if it has the same cmd as a built-in command
        cmd  = mpth.split("/")[-1]
        if cmd in self.INNER_CMD:
            self.format_print("Command name conflicts with built-in commands")
            return
        
        c_fn = "%s.py" % cmd
        c_fn = cdir.replace("\\","/").rstrip("/") + "/" + c_fn

        if os.path.exists(c_fn):
            self.format_print("command already exists")
            return

        if inner == 'true':
            bscmd = '..factory'
        else:
            bscmd = 'bdpycmd.cmd.factory'
        
        tmp = \
        f"""
# This file is a command execution file generated by the command assistant. 
# Do not edit it.

from {bscmd}.base import BaseCommand 
from {mdu} import {cls}

# Command Description Information
_BDCMD_DESC_ = {{
    "name":'{cmd}',
    "alias":'{alias}',
    "desc":'{desc}'
}}

class Command(BaseCommand,{cls}):
    def __init__(self):
        super().__init__(name=__class__.__module__,alias='{alias}',description='{desc}')
        super(BaseCommand,self).__init__()
        """
        with open(file=c_fn,mode='w',encoding='utf8') as f:
            f.write(tmp.lstrip())
        
        self.format_print("Command created successfully")
    
    @base.BaseCommand.as_cmder
    def test(self,a=1,b=2):
        """
        test command
        
        :param a: any
        :param b: any
        :return:
        """
        self.format_print(a,b)

        